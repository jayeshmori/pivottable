{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Table","pvtData","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","pivotUtilities","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","html","Error","convertToArray","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","n","ref1","ref2","ref3","fromCharCode","agg","pivotData","c","r","spanSize","td","th","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","innerHTML","pivot","e","error","error1","renderer","rendererOptions","console","stack","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","axisValues","colList","existingOpts","initialRender","len3","len4","o","pivotTable","q","ref4","refresh","refreshDelayed","rendererControl","shownAttributes","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","keys","showFilterList","triangleLink","updateFilter","valueList","hide","class","find","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","inArray","rendererName","len5","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","ref5","ref6","s","subopts","t","unusedAttrsContainer","remove","not","excludedItems","ref7","inclusionsInfo","children","selectpicker","setTimeout","log","sortable","update","ui","sender","connectWith","items","scope","colorGen","heatmapper","numCols","numRows","color","hexGen","hex","intensity","round","toString","colorFor","forEachCell","values","elem","barchart","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n        \ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults = \n            digitsAfterDecimal: 2, scaler: 1, \n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) -> \n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) -> \n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n\n    renderers =\n        \"Table\":          (pvtData, opts) ->   pivotTableRenderer(pvtData, opts)\n        \"Heatmap\":        (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap()\n        \"Row Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\")\n        \"Col Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\")\n\n    locales = \n        en: \n            aggregators: aggregators\n            renderers: renderers\n            localeStrings: \n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) -> \n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort \n        else\n            return naturalSort\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs}\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).html()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        arrSort: (attrs) => \n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) -> \n                for i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs \n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.innerHTML = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.innerHTML = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            result.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.innerHTML = r\n                tr.appendChild th \n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            result.appendChild tr\n\n        #now the actual data rows, with their row headers and totals\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.innerHTML = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.innerHTML = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.innerHTML = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            result.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.innerHTML = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.innerHTML = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        result.appendChild tr\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: -> \n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new PivotData(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n        \n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: -> \n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n\n            #renderer control\n\n            rendererControl = $(\".pivotUI #renderers\");\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer selectpicker')\n                .attr('data-width','90%')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\".pivotUI #dimensions\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\", class:\"btn btn-xs btn-default mr-10\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\", class:\"btn btn-xs btn-default\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch form-control mt-10\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").html k\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\",class:\"btn btn-xs btn-default\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n\n\n            #aggregator menu and value area\n            aggregator = $(\"<select>\").addClass('pvtAggregator selectpicker').attr('data-width','90%')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\".pivotUI #measures\").addClass('pvtVals')\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            #td1 = $(\"<td>\").appendTo(tr1);\n            $(\".pivotUI #pivotColDrop\").addClass('pvtAxisContainer pvtHorizList pvtCols')\n\n\n\n            #row axes\n            $(\".pivotUI #pivotRowDrop\").addClass('pvtAxisContainer pvtHorizList pvtRows')\n\n            #the actual pivot table container\n            pivotTable = $(\".pivotUI #pivotResult\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea');\n\n#            #finally the renderer dropdown and unused attribs are inserted at the requested location\n#            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n#                uiTable.find('tr:nth-child(1)').prepend rendererControl\n#                uiTable.find('tr:nth-child(2)').prepend colList\n#            else\n#                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n\n\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown selectpicker')\n                            .attr('data-width','90%')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                @find(\".selectpicker\").selectpicker('render')\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n            console.log( @find(\".pvtAxisContainer\"));\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\") ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        colorGen = (color, min, max) ->\n            hexGen = switch color\n                when \"red\"   then (hex) -> \"ff#{hex}#{hex}\"\n                when \"green\" then (hex) -> \"#{hex}ff#{hex}\"\n                when \"blue\"  then (hex) -> \"#{hex}#{hex}ff\"\n\n            return (x) ->\n                intensity = 255 - Math.round 255*(x-min)/(max-min)\n                hex = intensity.toString(16).split(\".\")[0]\n                hex = 0+hex if hex.length == 1\n                return hexGen(hex)\n\n        heatmapper = (scope, color) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorFor = colorGen color, Math.min(values...), Math.max(values...)\n            forEachCell (x, elem) -> elem.css \"background-color\", \"#\" + colorFor(x)\n\n        switch scope\n            when \"heatmap\"\n                heatmapper \".pvtVal\", \"red\"\n            when \"rowheatmap\"\n                heatmapper \".pvtVal.row#{i}\", \"red\" for i in [0...numRows]\n            when \"colheatmap\"\n                heatmapper \".pvtVal.col#{j}\", \"red\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\", \"red\"\n        heatmapper \".pvtTotal.colTotal\", \"red\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(pvtData, opts) {\n        return pivotTableRenderer(pvtData, opts);\n      },\n      \"Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap();\n      },\n      \"Row Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\");\n      },\n      \"Col Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\");\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).html();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, td, th, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.innerHTML = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.innerHTML = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        result.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.innerHTML = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        result.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.innerHTML = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.innerHTML = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.innerHTML = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        result.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.innerHTML = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.innerHTML = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      result.appendChild(tr);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, error, error1, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new PivotData(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error1) {\n        e = error1;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attrLength, axisValues, c, colList, defaults, e, error, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, n, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, tblCols, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        rendererControl = $(\".pivotUI #renderers\");\n        renderer = $(\"<select>\").addClass('pvtRenderer selectpicker').attr('data-width', '90%').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        colList = $(\".pivotUI #dimensions\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, n, results;\n          results = [];\n          for (n = 0, len2 = tblCols.length; n < len2; n++) {\n            c = tblCols[n];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len2 = shownAttributes.length; n < len2; n++) {\n            a = shownAttributes[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, o, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\",\n              \"class\": \"btn btn-xs btn-default mr-10\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\",\n              \"class\": \"btn btn-xs btn-default\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch form-control mt-10\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (o = 0, len3 = ref2.length; o < len3; o++) {\n              k = ref2[o];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").html(k));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\",\n            \"class\": \"btn btn-xs btn-default\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        aggregator = $(\"<select>\").addClass('pvtAggregator selectpicker').attr('data-width', '90%').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\".pivotUI #measures\").addClass('pvtVals').append(aggregator).append($(\"<br>\"));\n        $(\".pivotUI #pivotColDrop\").addClass('pvtAxisContainer pvtHorizList pvtCols');\n        $(\".pivotUI #pivotRowDrop\").addClass('pvtAxisContainer pvtHorizList pvtRows');\n        pivotTable = $(\".pivotUI #pivotResult\").attr(\"valign\", \"top\").addClass('pvtRendererArea');\n        ref3 = opts.cols;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (q = 0, len4 = ref4.length; q < len4; q++) {\n          x = ref4[q];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, s, subopts, t, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: []\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = s = 0, ref6 = numInputsToProcess; 0 <= ref6 ? s < ref6 : s > ref6; x = 0 <= ref6 ? ++s : --s) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown selectpicker').attr('data-width', '90%').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (t = 0, len5 = shownAttributes.length; t < len5; t++) {\n                  attr = shownAttributes[t];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            _this.find(\".selectpicker\").selectpicker('render');\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        console.log(this.find(\".pvtAxisContainer\"));\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope) {\n      var colorGen, heatmapper, i, j, l, n, numCols, numRows, ref, ref1;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorGen = function(color, min, max) {\n        var hexGen;\n        hexGen = (function() {\n          switch (color) {\n            case \"red\":\n              return function(hex) {\n                return \"ff\" + hex + hex;\n              };\n            case \"green\":\n              return function(hex) {\n                return hex + \"ff\" + hex;\n              };\n            case \"blue\":\n              return function(hex) {\n                return \"\" + hex + hex + \"ff\";\n              };\n          }\n        })();\n        return function(x) {\n          var hex, intensity;\n          intensity = 255 - Math.round(255 * (x - min) / (max - min));\n          hex = intensity.toString(16).split(\".\")[0];\n          if (hex.length === 1) {\n            hex = 0 + hex;\n          }\n          return hexGen(hex);\n        };\n      };\n      heatmapper = (function(_this) {\n        return function(scope, color) {\n          var colorFor, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorFor = colorGen(color, Math.min.apply(Math, values), Math.max.apply(Math, values));\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", \"#\" + colorFor(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\", \"red\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i, \"red\");\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref1 = numCols; 0 <= ref1 ? n < ref1 : n > ref1; j = 0 <= ref1 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j, \"red\");\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\", \"red\");\n      heatmapper(\".pvtTotal.colTotal\", \"red\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}